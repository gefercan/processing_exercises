// grid of arcs exercise by tim rodenbroeker
// general variables
color bg=#010101;
color fg=#ff0101;

//init function
void setup() {
//canvas size
  size(900, 900);
}

//render function
void draw() {
//callback function
  grid();
}


//grid building function
void grid(){
  //set up colors
  background(bg,mouseX/2,mouseY/2);
  fill(fg,mouseY,mouseX);
  noStroke();
  //building grid
  float tilesX=4;
  float tilesY= tilesX;
  //size of tiles
  float tileW= width/tilesX;
  float tileH=height/tilesY;
  //nested for loops
  for (int x=0; x < tilesX; x++) {
    for (int y =0; y< tilesY; y++) {
      float posX = tileW * x;
      float posY = tileH * y;

      //using sine variations as input
      float wave=sin(radians(frameCount + x*10 + y* 10));
      //mapping the sine into the options
      float mappedWave= map(wave, -1, 1, 0, 5);
      //linking wave  to select arcs
      int selector= int(mappedWave);

      //options linked to selector variable
      pushMatrix();
      translate(posX, posY);
      if (selector ==0) {
        arc(0, 0, tileW*2, tileH*2, radians(0), radians(90));
      } else if (selector == 1) {
        arc(tileW, 0, tileW*2, tileH*2, radians(90), radians(180));
      } else if (selector == 2) {
        arc(tileW, tileH, tileW*2, tileH*2, radians(180), radians(270));
      } else if (selector == 3) {
        arc(0, tileH, tileW*2, tileH*2, radians(270), radians(360));
      } else {
        rect (0, 0, tileW, tileH);
      }
      popMatrix();
    }
  }
}